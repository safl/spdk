{
  "methods": [
    {
      "method": "bdev_set_options",
      "description": "Set global parameters for the block device (bdev) subsystem. This RPC may only be called before SPDK subsystems have been initialized.",
      "params": [
        {
          "param": "bdev_io_pool_size",
          "type": "number",
          "description": "Number of spdk_bdev_io structures in shared buffer pool",
          "required": false
        },
        {
          "param": "bdev_io_cache_size",
          "type": "number",
          "description": "Maximum number of spdk_bdev_io structures cached per thread",
          "required": false
        },
        {
          "param": "bdev_auto_examine",
          "type": "boolean",
          "description": "If set to false, the bdev layer will not examine every disks automatically",
          "required": false
        },
        {
          "param": "iobuf_small_cache_size",
          "type": "number",
          "description": "Size of the small iobuf per thread cache",
          "required": false
        },
        {
          "param": "iobuf_large_cache_size",
          "type": "number",
          "description": "Size of the large iobuf per thread cache",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_examine",
      "description": "Request that the bdev layer examines the given bdev for metadata and creates new bdevs if metadata is found. This is only necessary if auto_examine has been set to false using bdev_set_options. By default, auto_examine is true and bdev examination is automatic.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Block device name",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_wait_for_examine",
      "description": "Report when all bdevs have been examined by every bdev module.",
      "params": []
    },
    {
      "method": "bdev_compress_create",
      "description": "Create a new compress bdev on a given base bdev.",
      "params": [
        {
          "param": "base_bdev_name",
          "type": "string",
          "description": "Name of the base bdev",
          "required": true
        },
        {
          "param": "pm_path",
          "type": "string",
          "description": "Path to persistent memory",
          "required": true
        },
        {
          "param": "lb_size",
          "type": "number",
          "description": "Compressed vol logical block size (512 or 4096)",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_compress_delete",
      "description": "Delete a compressed bdev.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of the compress bdev",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_compress_get_orphans",
      "description": "Get a list of compressed volumes that are missing their pmem metadata.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of the compress bdev",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_crypto_create",
      "description": "Create a new crypto bdev on a given base bdev.",
      "params": [
        {
          "param": "base_bdev_name",
          "type": "string",
          "description": "Name of the base bdev",
          "required": true
        },
        {
          "param": "name",
          "type": "string",
          "description": "Name of the crypto vbdev to create",
          "required": true
        },
        {
          "param": "crypto_pmd",
          "type": "string",
          "description": "Name of the crypto device driver. Obsolete, see accel_crypto_key_create",
          "required": false
        },
        {
          "param": "key",
          "type": "string",
          "description": "Key in hex form. Obsolete, see accel_crypto_key_create",
          "required": false
        },
        {
          "param": "cipher",
          "type": "string",
          "description": "Cipher to use, AES_CBC or AES_XTS (QAT and MLX5). Obsolete, see accel_crypto_key_create",
          "required": false
        },
        {
          "param": "key2",
          "type": "string",
          "description": "2nd key in hex form only required for cipher AET_XTS. Obsolete, see accel_crypto_key_create",
          "required": false
        },
        {
          "param": "key_name",
          "type": "string",
          "description": "Name of the key created with accel_crypto_key_create",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_crypto_delete",
      "description": "Delete a crypto bdev.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of the crypto bdev",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_ocf_create",
      "description": "Construct new OCF bdev. Command accepts cache mode that is going to be used. You can find more details about supported cache modes in the OCF documentation",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Bdev name to use",
          "required": true
        },
        {
          "param": "mode",
          "type": "string",
          "description": "OCF cache mode: wb, wt, pt, wa, wi, wo",
          "required": true
        },
        {
          "param": "cache_bdev_name",
          "type": "string",
          "description": "Name of underlying cache bdev",
          "required": true
        },
        {
          "param": "core_bdev_name",
          "type": "string",
          "description": "Name of underlying core bdev",
          "required": true
        },
        {
          "param": "cache_line_size",
          "type": "number",
          "description": "OCF cache line size in KiB: 4, 8, 16, 32, 64",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_ocf_delete",
      "description": "Delete the OCF bdev",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Bdev name",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_ocf_get_stats",
      "description": "Get statistics of chosen OCF block device.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Block device name",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_ocf_reset_stats",
      "description": "Reset statistics of chosen OCF block device.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Block device name",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_ocf_get_bdevs",
      "description": "Get list of OCF devices including unregistered ones.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of OCF vbdev or name of cache device or name of core device",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_ocf_set_cache_mode",
      "description": "Set new cache mode on OCF bdev.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Bdev name",
          "required": true
        },
        {
          "param": "mode",
          "type": "string",
          "description": "OCF cache mode: wb, wt, pt, wa, wi, wo",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_ocf_set_seqcutoff",
      "description": "Set sequential cutoff parameters on all cores for the given OCF cache device. A brief description of this functionality can be found in OpenCAS documentation.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Bdev name",
          "required": true
        },
        {
          "param": "policy",
          "type": "string",
          "description": "Sequential cutoff policy: always, full, never",
          "required": true
        },
        {
          "param": "threshold",
          "type": "number",
          "description": "Activation threshold in KiB",
          "required": false
        },
        {
          "param": "promotion_count",
          "type": "number",
          "description": "Promotion request count",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_ocf_flush_start",
      "description": "Start flushing OCF cache device.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Bdev name",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_ocf_flush_status",
      "description": "Get flush status of OCF cache device.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Bdev name",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_malloc_create",
      "description": "Construct Malloc bdev",
      "params": [
        {
          "param": "num_blocks",
          "type": "number",
          "description": "Number of blocks",
          "required": true
        },
        {
          "param": "block_size",
          "type": "number",
          "description": "Data block size in bytes -must be multiple of 512",
          "required": true
        },
        {
          "param": "physical_block_size",
          "type": "number",
          "description": "Physical block size of device; must be a power of 2 and at least 512",
          "required": false
        },
        {
          "param": "name",
          "type": "string",
          "description": "Bdev name to use",
          "required": false
        },
        {
          "param": "uuid",
          "type": "string",
          "description": "UUID of new bdev",
          "required": false
        },
        {
          "param": "optimal_io_boundary",
          "type": "number",
          "description": "Split on optimal IO boundary, in number of blocks, default 0",
          "required": false
        },
        {
          "param": "md_size",
          "type": "number",
          "description": "Metadata size for this bdev (0, 8, 16, 32, 64, or 128). Default is 0.",
          "required": false
        },
        {
          "param": "md_interleave",
          "type": "boolean",
          "description": "Metadata location, interleaved if true, and separated if false. Default is false.",
          "required": false
        },
        {
          "param": "dif_type",
          "type": "number",
          "description": "Protection information type. Parameter -md-size needs to be set along -dif-type. Default=0 - no protection.",
          "required": false
        },
        {
          "param": "dif_is_head_of_md",
          "type": "boolean",
          "description": "Protection information is in the first 8 bytes of metadata. Default=false.",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_malloc_delete",
      "description": "Delete Malloc bdev",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Bdev name",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_null_create",
      "description": "Construct Null",
      "params": [
        {
          "param": "num_blocks",
          "type": "number",
          "description": "Number of blocks",
          "required": true
        },
        {
          "param": "block_size",
          "type": "number",
          "description": "Block size in bytes",
          "required": true
        },
        {
          "param": "name",
          "type": "string",
          "description": "Bdev name to use",
          "required": true
        },
        {
          "param": "physical_block_size",
          "type": "number",
          "description": "physical block size of the device; data part size must be a power of 2 and at least 512",
          "required": false
        },
        {
          "param": "uuid",
          "type": "string",
          "description": "UUID of new bdev",
          "required": false
        },
        {
          "param": "md_size",
          "type": "number",
          "description": "Metadata size for this bdev. Default=0.",
          "required": false
        },
        {
          "param": "dif_type",
          "type": "number",
          "description": "Protection information type. Parameter -md-size needs to be set along -dif-type. Default=0 - no protection.",
          "required": false
        },
        {
          "param": "dif_is_head_of_md",
          "type": "boolean",
          "description": "Protection information is in the first 8 bytes of metadata. Default=false.",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_null_delete",
      "description": "Delete Null.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Bdev name",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_null_resize",
      "description": "Resize Null.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Bdev name",
          "required": true
        },
        {
          "param": "new_size",
          "type": "number",
          "description": "Bdev new capacity in MiB",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_raid_set_options",
      "description": "Set options for bdev raid",
      "params": [
        {
          "param": "process_window_size_kb",
          "type": "number",
          "description": "Background process (e.g. rebuild) window size in KiB",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_raid_get_bdevs",
      "description": "This is used to list all the raid bdev details based on the input category requested. Category should be one of 'all', 'online', 'configuring' or 'offline'. 'all' means all the raid bdevs whether they are online or configuring or offline. 'online' is the raid bdev which is registered with bdev layer. 'configuring' is the raid bdev which does not have full configuration discovered yet. 'offline' is the raid bdev which is not registered with bdev as of now and it has encountered any error or user has requested to offline the raid bdev.",
      "params": [
        {
          "param": "category",
          "type": "string",
          "description": "All or online or configuring or offline",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_raid_create",
      "description": "Constructs new RAID bdev.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "RAID bdev name",
          "required": true
        },
        {
          "param": "raid_level",
          "type": "string",
          "description": "RAID level",
          "required": true
        },
        {
          "param": "base_bdevs",
          "type": "string",
          "description": "Base bdevs name, whitespace separated list in quotes",
          "required": true
        },
        {
          "param": "strip_size_kb",
          "type": "number",
          "description": "Strip size in KB",
          "required": false
        },
        {
          "param": "uuid",
          "type": "string",
          "description": "UUID for this RAID bdev",
          "required": false
        },
        {
          "param": "superblock",
          "type": "boolean",
          "description": "If set, information about raid bdev will be stored in superblock on each base bdev (default: `false`)",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_raid_delete",
      "description": "Removes RAID bdev.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "RAID bdev name",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_raid_add_base_bdev",
      "description": "Add base bdev to existing raid bdev",
      "params": [
        {
          "param": "base_bdev",
          "type": "string",
          "description": "Base bdev name",
          "required": true
        },
        {
          "param": "raid_bdev",
          "type": "string",
          "description": "Raid bdev name",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_raid_remove_base_bdev",
      "description": "Remove base bdev from existing raid bdev.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Base bdev name in RAID",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_aio_create",
      "description": "Construct Linux AIO bdev.",
      "params": [
        {
          "param": "filename",
          "type": "number",
          "description": "Path to device or file",
          "required": true
        },
        {
          "param": "name",
          "type": "string",
          "description": "Bdev name to use",
          "required": true
        },
        {
          "param": "block_size",
          "type": "number",
          "description": "Block size in bytes",
          "required": false
        },
        {
          "param": "readonly",
          "type": "boolean",
          "description": "Set aio bdev as read-only",
          "required": false
        },
        {
          "param": "fallocate",
          "type": "boolean",
          "description": "Enable UNMAP and WRITE ZEROES support. Intended only for testing purposes due to synchronous syscall.",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_aio_rescan",
      "description": "Rescan the size of Linux AIO bdev.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Bdev name",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_aio_delete",
      "description": "Delete Linux AIO bdev.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Bdev name",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_uring_create",
      "description": "Create a bdev with io_uring backend.",
      "params": [
        {
          "param": "filename",
          "type": "string",
          "description": "Path to device or file (ex: /dev/nvme0n1)",
          "required": true
        },
        {
          "param": "name",
          "type": "string",
          "description": "Name of bdev",
          "required": true
        },
        {
          "param": "block_size",
          "type": "number",
          "description": "Block size of device (If omitted, get the block size from the file)",
          "required": false
        },
        {
          "param": "uuid",
          "type": "string",
          "description": "UUID of new bdev",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_uring_rescan",
      "description": "Rescan a Linux URING block device.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of uring bdev to rescan",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_uring_delete",
      "description": "Remove a uring bdev.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of uring bdev to delete",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_xnvme_create",
      "description": "Create xnvme bdev. This bdev type redirects all IO to its underlying backend.",
      "params": [
        {
          "param": "filename",
          "type": "string",
          "description": "Path to device or file (ex: /dev/nvme0n1)",
          "required": true
        },
        {
          "param": "name",
          "type": "string",
          "description": "Name of xNVMe bdev to create",
          "required": true
        },
        {
          "param": "io_mechanism",
          "type": "string",
          "description": "IO mechanism to use (ex: libaio, io_uring, io_uring_cmd, etc.)",
          "required": true
        },
        {
          "param": "conserve_cpu",
          "type": "boolean",
          "description": "Whether or not to conserve CPU when polling (default: false)",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_xnvme_delete",
      "description": "Delete xnvme bdev.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of xnvme bdev to delete",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_nvme_set_options",
      "description": "Set global parameters for all bdev NVMe. This RPC may only be called before SPDK subsystems have been initialized or any bdev NVMe has been created.",
      "params": [
        {
          "param": "action_on_timeout",
          "type": "string",
          "description": "Action to take on command time out. Valid values are: none, reset, abort",
          "required": false
        },
        {
          "param": "timeout_us",
          "type": "number",
          "description": "Timeout for each command, in microseconds. If 0, don't track timeouts",
          "required": false
        },
        {
          "param": "timeout_admin_us",
          "type": "number",
          "description": "Timeout for each admin command, in microseconds. If 0, treat same as io timeouts",
          "required": false
        },
        {
          "param": "keep_alive_timeout_ms",
          "type": "number",
          "description": "Keep alive timeout period in millisecond, default is 10s",
          "required": false
        },
        {
          "param": "arbitration_burst",
          "type": "number",
          "description": "The value is expressed as a power of two, a value of 111b indicates no limit",
          "required": false
        },
        {
          "param": "low_priority_weight",
          "type": "number",
          "description": "The maximum number of commands that the controller may launch at one time from a low",
          "required": false
        },
        {
          "param": "medium_priority_weight",
          "type": "number",
          "description": "The maximum number of commands that the controller may launch at one time from a medium priority queue",
          "required": false
        },
        {
          "param": "high_priority_weight",
          "type": "number",
          "description": "The maximum number of commands that the controller may launch at one time from a high priority queue",
          "required": false
        },
        {
          "param": "nvme_adminq_poll_period_us",
          "type": "number",
          "description": "How often the admin queue is polled for asynchronous events in microseconds",
          "required": false
        },
        {
          "param": "nvme_ioq_poll_period_us",
          "type": "number",
          "description": "How often I/O queues are polled for completions, in microseconds. Default: 0 (as fast as possible).",
          "required": false
        },
        {
          "param": "io_queue_requests",
          "type": "number",
          "description": "The number of requests allocated for each NVMe I/O queue. Default: 512.",
          "required": false
        },
        {
          "param": "delay_cmd_submit",
          "type": "boolean",
          "description": "Enable delaying NVMe command submission to allow batching of multiple commands. Default: true.",
          "required": false
        },
        {
          "param": "transport_retry_count",
          "type": "number",
          "description": "The number of attempts per I/O in the transport layer before an I/O fails.",
          "required": false
        },
        {
          "param": "bdev_retry_count",
          "type": "number",
          "description": "The number of attempts per I/O in the bdev layer before an I/O fails. -1 means infinite retries.",
          "required": false
        },
        {
          "param": "transport_ack_timeout",
          "type": "number",
          "description": "Time to wait ack until retransmission for RDMA or connection close for TCP. Range 0-31 where 0 means use default.",
          "required": false
        },
        {
          "param": "ctrlr_loss_timeout_sec",
          "type": "number",
          "description": "Time to wait until ctrlr is reconnected before deleting ctrlr. -1 means infinite reconnects. 0 means no reconnect.",
          "required": false
        },
        {
          "param": "reconnect_delay_sec",
          "type": "number",
          "description": "Time to delay a reconnect trial. 0 means no reconnect.",
          "required": false
        },
        {
          "param": "fast_io_fail_timeout_sec",
          "type": "number",
          "description": "Time to wait until ctrlr is reconnected before failing I/O to ctrlr. 0 means no such timeout.",
          "required": false
        },
        {
          "param": "disable_auto_failback",
          "type": "boolean",
          "description": "Disable automatic failback. The RPC bdev_nvme_set_preferred_path can be used to do manual failback.",
          "required": false
        },
        {
          "param": "generate_uuids",
          "type": "boolean",
          "description": "Enable generation of UUIDs for NVMe bdevs that do not provide this value themselves.",
          "required": false
        },
        {
          "param": "transport_tos",
          "type": "number",
          "description": "IPv4 Type of Service value. Only applicable for RDMA transport. Default: 0 (no TOS is applied).",
          "required": false
        },
        {
          "param": "nvme_error_stat",
          "type": "boolean",
          "description": "Enable collecting NVMe error counts.",
          "required": false
        },
        {
          "param": "rdma_srq_size",
          "type": "number",
          "description": "Set the size of a shared rdma receive queue. Default: 0 (disabled).",
          "required": false
        },
        {
          "param": "io_path_stat",
          "type": "boolean",
          "description": "Enable collecting I/O stat of each nvme bdev io path. Default: `false`.",
          "required": false
        },
        {
          "param": "allow_accel_sequence",
          "type": "boolean",
          "description": "Allow NVMe bdevs to advertise support for accel sequences if the controller also supports them. Default: `false`.",
          "required": false
        },
        {
          "param": "rdma_max_cq_size",
          "type": "number",
          "description": "Set the maximum size of a rdma completion queue. Default: 0 (unlimited)",
          "required": false
        },
        {
          "param": "rdma_cm_event_timeout_ms",
          "type": "number",
          "description": "Time to wait for RDMA CM events. Default: 0 (0 means using default value of driver).",
          "required": false
        },
        {
          "param": "dhchap_digests",
          "type": "string",
          "description": "List of allowed DH-HMAC-CHAP digests.",
          "required": false
        },
        {
          "param": "dhchap_dhgroups",
          "type": "string",
          "description": "List of allowed DH-HMAC-CHAP DH groups.",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_nvme_set_hotplug",
      "description": "Change settings of the NVMe hotplug feature. If enabled, PCIe NVMe bdevs will be automatically discovered on insertion and deleted on removal.",
      "params": [
        {
          "param": "enable",
          "type": "string",
          "description": "True to enable, false to disable",
          "required": true
        },
        {
          "param": "period_us",
          "type": "number",
          "description": "How often to poll for hot-insert and hot-remove events. Values: 0 - reset/use default or 1 to 10000000.",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_nvme_attach_controller",
      "description": "Construct NVMe bdev. This RPC can also be used to add additional paths to an existing controller to enable multipathing. This is done by specifying the name parameter as an existing controller. When adding an additional path, the hostnqn, hostsvcid, hostaddr, prchk_reftag, and prchk_guard_arguments must not be specified and are assumed to have the same value as the existing path.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of the NVMe controller, prefix for each bdev name",
          "required": true
        },
        {
          "param": "trtype",
          "type": "string",
          "description": "NVMe-oF target trtype: 'PCIe', 'RDMA', 'FC', 'TCP'",
          "required": true
        },
        {
          "param": "traddr",
          "type": "string",
          "description": "NVMe-oF target address: PCI BDF or IP address",
          "required": true
        },
        {
          "param": "adrfam",
          "type": "string",
          "description": "NVMe-oF target adrfam: ipv4, ipv6, ib, fc, intra_host",
          "required": false
        },
        {
          "param": "trsvcid",
          "type": "string",
          "description": "NVMe-oF target trsvcid: port number for IP-based addresses",
          "required": false
        },
        {
          "param": "priority",
          "type": "string",
          "description": "Transport connection priority. Supported by TCP transport with POSIX sock module (see socket(7) man page).",
          "required": false
        },
        {
          "param": "subnqn",
          "type": "string",
          "description": "NVMe-oF target subnqn",
          "required": false
        },
        {
          "param": "hostnqn",
          "type": "string",
          "description": "NVMe-oF target hostnqn",
          "required": false
        },
        {
          "param": "hostaddr",
          "type": "string",
          "description": "NVMe-oF host address: ip address",
          "required": false
        },
        {
          "param": "hostsvcid",
          "type": "string",
          "description": "NVMe-oF host trsvcid: port number",
          "required": false
        },
        {
          "param": "prchk_reftag",
          "type": "string",
          "description": "Enable checking of PI reference tag for I/O processing",
          "required": false
        },
        {
          "param": "prchk_guard",
          "type": "string",
          "description": "Enable checking of PI guard for I/O processing",
          "required": false
        },
        {
          "param": "hdgst",
          "type": "string",
          "description": "Enable TCP header digest",
          "required": false
        },
        {
          "param": "ddgst",
          "type": "string",
          "description": "Enable TCP data digest",
          "required": false
        },
        {
          "param": "fabrics_connect_timeout_us",
          "type": "number",
          "description": "Timeout for fabrics connect (in microseconds)",
          "required": false
        },
        {
          "param": "multipath",
          "type": "string",
          "description": "Multipathing behavior: disable, failover, multipath. Default is failover.",
          "required": false
        },
        {
          "param": "num_io_queues",
          "type": "string",
          "description": "The number of IO queues to request during initialization. Range: (0, UINT16_MAX + 1], Default is 1024.",
          "required": false
        },
        {
          "param": "ctrlr_loss_timeout_sec",
          "type": "string",
          "description": "Time to wait until ctrlr is reconnected before deleting ctrlr.  -1 means infinite reconnects. 0 means no reconnect.",
          "required": false
        },
        {
          "param": "reconnect_delay_sec",
          "type": "number",
          "description": "Time to delay a reconnect retry.",
          "required": false
        },
        {
          "param": "fast_io_fail_timeout_sec",
          "type": "number",
          "description": "Time to wait until ctrlr is reconnected before failing I/O to ctrlr. 0 means no such timeout.",
          "required": false
        },
        {
          "param": "psk",
          "type": "string",
          "description": " Name of the pre-shared key to be used for TLS (Enables SSL socket implementation for TCP)",
          "required": false
        },
        {
          "param": "max_bdevs",
          "type": "number",
          "description": "The size of the name array for newly created bdevs. Default is 128.",
          "required": false
        },
        {
          "param": "dhchap_key",
          "type": "string",
          "description": "DH-HMAC-CHAP key name.",
          "required": false
        },
        {
          "param": "dhchap_ctrlr_key",
          "type": "string",
          "description": "DH-HMAC-CHAP controller key name.",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_nvme_detach_controller",
      "description": "Detach NVMe controller and delete any associated bdevs. Optionally, If all of the transport ID options are specified, only remove that transport path from the specified controller. If that is the only available path for the controller, this will also result in the controller being detached and the associated bdevs being deleted.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Controller name",
          "required": true
        },
        {
          "param": "trtype",
          "type": "string",
          "description": "NVMe-oF target trtype: rdma or tcp",
          "required": false
        },
        {
          "param": "traddr",
          "type": "string",
          "description": "NVMe-oF target address: ip or BDF",
          "required": false
        },
        {
          "param": "adrfam",
          "type": "string",
          "description": "NVMe-oF target adrfam: ipv4, ipv6, ib, fc, intra_host",
          "required": false
        },
        {
          "param": "trsvcid",
          "type": "string",
          "description": "NVMe-oF target trsvcid: port number",
          "required": false
        },
        {
          "param": "subnqn",
          "type": "string",
          "description": "NVMe-oF target subnqn",
          "required": false
        },
        {
          "param": "hostaddr",
          "type": "string",
          "description": "NVMe-oF host address: ip",
          "required": false
        },
        {
          "param": "hostsvcid",
          "type": "string",
          "description": "NVMe-oF host svcid: port number",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_nvme_reset_controller",
      "description": "For non NVMe multipath, reset an NVMe controller whose name is given by the name parameter.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "NVMe controller name (or NVMe bdev controller name for multipath)",
          "required": true
        },
        {
          "param": "cntlid",
          "type": "number",
          "description": "NVMe controller ID (used as NVMe controller name for multipath)",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_nvme_enable_controller",
      "description": "For non NVMe multipath, enable an NVMe controller whose name is given by the name parameter.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "NVMe controller name (or NVMe bdev controller name for multipath)",
          "required": true
        },
        {
          "param": "cntlid",
          "type": "number",
          "description": "NVMe controller ID (used as NVMe controller name for multipath)",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_nvme_disable_controller",
      "description": "For non NVMe multipath, disable an NVMe controller whose name is given by the name parameter.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "NVMe controller name (or NVMe bdev controller name for multipath)",
          "required": true
        },
        {
          "param": "cntlid",
          "type": "number",
          "description": "NVMe controller ID (used as NVMe controller name for multipath)",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_nvme_start_discovery",
      "description": "Start a discovery service for the discovery subsystem of the specified transport ID.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Prefix for NVMe controllers",
          "required": true
        },
        {
          "param": "trtype",
          "type": "string",
          "description": "NVMe-oF target trtype: rdma or tcp",
          "required": true
        },
        {
          "param": "traddr",
          "type": "string",
          "description": "NVMe-oF target address: ip",
          "required": true
        },
        {
          "param": "adrfam",
          "type": "string",
          "description": "NVMe-oF target adrfam: ipv4, ipv6",
          "required": false
        },
        {
          "param": "trsvcid",
          "type": "string",
          "description": "NVMe-oF target trsvcid: port number",
          "required": false
        },
        {
          "param": "hostnqn",
          "type": "string",
          "description": "NVMe-oF target hostnqn",
          "required": false
        },
        {
          "param": "wait_for_attach",
          "type": "boolean",
          "description": "Wait to complete until all discovered NVM subsystems are attached",
          "required": false
        },
        {
          "param": "ctrlr_loss_timeout_sec",
          "type": "number",
          "description": "Time to wait until ctrlr is reconnected before deleting ctrlr. -1 means infinite reconnects. 0 means no reconnect.",
          "required": false
        },
        {
          "param": "reconnect_delay_sec",
          "type": "number",
          "description": "Time to delay a reconnect trial. 0 means no reconnect.",
          "required": false
        },
        {
          "param": "fast_io_fail_timeout_sec",
          "type": "number",
          "description": "Time to wait until ctrlr is reconnected before failing I/O to ctrlr. 0 means no such timeout.",
          "required": false
        },
        {
          "param": "attach_timeout_ms",
          "type": "number",
          "description": "Time to wait until the discovery and all discovered NVM subsystems are attached",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_nvme_stop_discovery",
      "description": "Stop a discovery service. This includes detaching any controllers that were discovered via the service that is being stopped.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of service to stop",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_nvme_get_discovery_info",
      "description": "Get information about the discovery service.",
      "params": []
    },
    {
      "method": "bdev_nvme_get_io_paths",
      "description": "Display all or the specified NVMe bdev's active I/O paths.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of the NVMe bdev",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_nvme_set_preferred_path",
      "description": "Set the preferred I/O path for an NVMe bdev in multipath mode.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of the NVMe bdev",
          "required": true
        },
        {
          "param": "cntlid",
          "type": "number",
          "description": "NVMe-oF controller ID",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_nvme_set_multipath_policy",
      "description": "Set multipath policy of the NVMe bdev in multipath mode or set multipath selector for active-active multipath policy.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of the NVMe bdev",
          "required": true
        },
        {
          "param": "policy",
          "type": "string",
          "description": "Multipath policy: active_active or active_passive",
          "required": true
        },
        {
          "param": "selector",
          "type": "string",
          "description": "Multipath selector: round_robin or queue_depth, used in active-active mode. Default is round_robin",
          "required": false
        },
        {
          "param": "rr_min_io",
          "type": "number",
          "description": "Number of I/Os routed to current io path before switching to another for round-robin selector. The min value is 1.",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_nvme_get_path_iostat",
      "description": "Get I/O statistics for IO paths of the block device. Call RPC bdev_nvme_set_options to set enable_io_path_stat true before using this RPC.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of the NVMe bdev",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_nvme_cuse_register",
      "description": "Register CUSE device on NVMe controller. This feature is considered as experimental.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of the NVMe controller",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_nvme_cuse_unregister",
      "description": "Unregister CUSE device on NVMe controller. This feature is considered as experimental.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of the NVMe controller",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_zone_block_create",
      "description": "Creates a virtual zone device on top of existing non-zoned bdev.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of the Zone device",
          "required": true
        },
        {
          "param": "base_bdev",
          "type": "string",
          "description": "Name of the Base bdev",
          "required": true
        },
        {
          "param": "zone_capacity",
          "type": "number",
          "description": "Zone capacity in blocks",
          "required": true
        },
        {
          "param": "optimal_open_zones",
          "type": "number",
          "description": "Number of zones required to reach optimal write speed",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_zone_block_delete",
      "description": "Deletes a virtual zone device.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of the Zone device",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_rbd_register_cluster",
      "description": "This method is available only if SPDK was build with Ceph RBD support.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Registered Rados cluster object name",
          "required": false
        },
        {
          "param": "user_id",
          "type": "string",
          "description": "Ceph ID (i.e. admin, not client.admin)",
          "required": false
        },
        {
          "param": "config_param",
          "type": "string map",
          "description": "Explicit librados configuration",
          "required": false
        },
        {
          "param": "config_file",
          "type": "string",
          "description": "File path of libraodos configuration file",
          "required": false
        },
        {
          "param": "key_file",
          "type": "string",
          "description": "File path of libraodos key file",
          "required": false
        },
        {
          "param": "core_mask",
          "type": "string",
          "description": "core mask for librbd IO context threads",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_rbd_unregister_cluster",
      "description": "This method is available only if SPDK was build with Ceph RBD support. If there is still rbd bdev using this cluster, the unregisteration operation will fail.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Rados cluster object name to unregister",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_rbd_get_clusters_info",
      "description": "This method is available only if SPDK was build with Ceph RBD support.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Rados cluster object name to query (if omitted, query all clusters)",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_rbd_create",
      "description": "Create Ceph RBD bdev",
      "params": [
        {
          "param": "pool_name",
          "type": "string",
          "description": "Ceph RBD pool name",
          "required": true
        },
        {
          "param": "rbd_name",
          "type": "string",
          "description": "Ceph RBD image name",
          "required": true
        },
        {
          "param": "block_size",
          "type": "number",
          "description": "Block size of RBD volume",
          "required": true
        },
        {
          "param": "name",
          "type": "string",
          "description": "Name of block device",
          "required": false
        },
        {
          "param": "user_id",
          "type": "string",
          "description": "Ceph user name (i.e. admin, not client.admin)",
          "required": false
        },
        {
          "param": "config",
          "type": "string map",
          "description": "Explicit librados configuration",
          "required": false
        },
        {
          "param": "cluster_name",
          "type": "string",
          "description": "Rados cluster object name created in this module.",
          "required": false
        },
        {
          "param": "uuid",
          "type": "string",
          "description": "UUID of new bdev",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_rbd_delete",
      "description": "Delete Ceph RBD bdev",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of rbd bdev to delete",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_rbd_resize",
      "description": "Resize Ceph RBD bdev",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of rbd bdev to resize",
          "required": true
        },
        {
          "param": "new_size",
          "type": "number",
          "description": "New bdev size of resize operation. The unit is MiB",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_error_create",
      "description": "Construct error bdev.",
      "params": [
        {
          "param": "base_name",
          "type": "string",
          "description": "Base bdev name",
          "required": true
        },
        {
          "param": "uuid",
          "type": "string",
          "description": "UUID for this bdev",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_delay_create",
      "description": "Create delay bdev. This bdev type redirects all IO to it's base bdev and inserts a delay on the completion path to create an artificial drive latency. All latency values supplied to this bdev should be in microseconds.",
      "params": [
        {
          "param": "base_bdev_name",
          "type": "string",
          "description": "Name of the existing bdev",
          "required": true
        },
        {
          "param": "name",
          "type": "string",
          "description": "Name of block device",
          "required": true
        },
        {
          "param": "avg_read_latency",
          "type": "number",
          "description": "Average read latency (us). Complete 99% of read ops with this delay",
          "required": true
        },
        {
          "param": "p99_read_latency",
          "type": "number",
          "description": "p99 read latency (us). Complete 1% of read ops with this delay",
          "required": true
        },
        {
          "param": "avg_write_latency",
          "type": "number",
          "description": "average write latency (us). Complete 99% of write ops with this delay",
          "required": true
        },
        {
          "param": "p99_write_latency",
          "type": "number",
          "description": "p99 write latency (us). Complete 1% of write ops with this delay",
          "required": true
        },
        {
          "param": "uuid",
          "type": "string",
          "description": "UUID of block device",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_delay_delete",
      "description": "Delete delay bdev.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of delay bdev to delete",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_delay_update_latency",
      "description": "Update a target latency value associated with a given delay bdev. Any currently outstanding I/O will be completed with the old latency.",
      "params": [
        {
          "param": "delay_bdev_name",
          "type": "string",
          "description": "Name of the delay bdev",
          "required": true
        },
        {
          "param": "latency_type",
          "type": "string",
          "description": "One of: avg_read, avg_write, p99_read, p99_write",
          "required": true
        },
        {
          "param": "latency_us",
          "type": "number",
          "description": "The new latency value in microseconds",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_error_delete",
      "description": "Delete error bdev",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": " Name of error bdev to delete",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_iscsi_set_options",
      "description": "This RPC can be called at any time, but the new value will only take effect for new iSCSI bdevs.",
      "params": [
        {
          "param": "timeout_sec",
          "type": "number",
          "description": "Timeout for command, in seconds, if 0, don't track timeout",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_iscsi_create",
      "description": "Connect to iSCSI target and create bdev backed by this connection.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of block device",
          "required": true
        },
        {
          "param": "url",
          "type": "string",
          "description": "iSCSI resource URI",
          "required": true
        },
        {
          "param": "initiator_iqn",
          "type": "string",
          "description": "IQN name used during connection",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_iscsi_delete",
      "description": "Delete iSCSI bdev and terminate connection to target.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of iSCSI bdev to delete",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_passthru_create",
      "description": "Create passthru bdev. This bdev type redirects all IO to it's base bdev. It has no other purpose than being an example and a starting point in development of new bdev type.",
      "params": [
        {
          "param": "base_bdev_name",
          "type": "string",
          "description": "Name of the existing bdev",
          "required": true
        },
        {
          "param": "name",
          "type": "string",
          "description": "Name of block device",
          "required": true
        },
        {
          "param": "uuid",
          "type": "string",
          "description": "UUID of new bdev",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_passthru_delete",
      "description": "Delete passthru bdev.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of pass through bdev to delete",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_opal_create",
      "description": "This is used to create an OPAL virtual bdev.",
      "params": [
        {
          "param": "nvme_ctrlr_name",
          "type": "string",
          "description": "Name of nvme ctrlr that supports OPAL",
          "required": true
        },
        {
          "param": "nsid",
          "type": "number",
          "description": "Namespace ID of nvme ctrlr",
          "required": true
        },
        {
          "param": "locking_range_id",
          "type": "number",
          "description": "OPAL locking range ID corresponding to this virtual bdev",
          "required": true
        },
        {
          "param": "range_start",
          "type": "number",
          "description": "Start address of this locking range",
          "required": true
        },
        {
          "param": "range_length",
          "type": "number",
          "description": "Locking range length",
          "required": true
        },
        {
          "param": "password",
          "type": "string",
          "description": "admin password of OPAL",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_opal_get_info",
      "description": "This is used to get information of a given OPAL bdev.",
      "params": [
        {
          "param": "bdev_name",
          "type": "string",
          "description": "name of OPAL vbdev to get info",
          "required": true
        },
        {
          "param": "password",
          "type": "string",
          "description": "admin password",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_opal_delete",
      "description": "This is used to delete OPAL vbdev.",
      "params": [
        {
          "param": "bdev_name",
          "type": "string",
          "description": "Name of OPAL vbdev to delete",
          "required": true
        },
        {
          "param": "password",
          "type": "string",
          "description": "Admin password of base nvme bdev",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_opal_new_user",
      "description": "This enables a new user to the specified opal bdev so that the user can lock/unlock the bdev. Recalling this for the same opal bdev, only the newest user will have the privilege.",
      "params": [
        {
          "param": "bdev_name",
          "type": "string",
          "description": "Name of OPAL vbdev",
          "required": true
        },
        {
          "param": "admin_password",
          "type": "string",
          "description": "Admin password",
          "required": true
        },
        {
          "param": "user_id",
          "type": "number",
          "description": "ID of the user who will be added to this opal bdev",
          "required": true
        },
        {
          "param": "user_password",
          "type": "string",
          "description": "Password set for this user",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_opal_set_lock_state",
      "description": "This is used to lock/unlock specific opal bdev providing user ID and password.",
      "params": [
        {
          "param": "bdev_name",
          "type": "string",
          "description": "Name of OPAL vbdev",
          "required": true
        },
        {
          "param": "user_id",
          "type": "number",
          "description": "ID of the user who will set lock state",
          "required": true
        },
        {
          "param": "password",
          "type": "string",
          "description": "Password of the user",
          "required": true
        },
        {
          "param": "lock_state",
          "type": "string",
          "description": "Lock state to set",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_split_create",
      "description": "Create split block devices from a base bdev.",
      "params": [
        {
          "param": "base_bdev",
          "type": "string",
          "description": "Base bdev name to split",
          "required": true
        },
        {
          "param": "split_count",
          "type": "number",
          "description": "Number of splits bdevs to create",
          "required": true
        },
        {
          "param": "split_size_mb",
          "type": "number",
          "description": "Size of each split volume in MiB",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_split_delete",
      "description": "This is used to remove the split vbdevs.",
      "params": [
        {
          "param": "base_bdev",
          "type": "string",
          "description": "Name of previously split bdev",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_ftl_create",
      "description": "Create FTL bdev.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of the bdev",
          "required": true
        },
        {
          "param": "base_bdev",
          "type": "string",
          "description": "Name of the base device",
          "required": true
        },
        {
          "param": "cache",
          "type": "string",
          "description": "Name of the cache device",
          "required": true
        },
        {
          "param": "core_mask",
          "type": "string",
          "description": "CPU core(s) possible for placement of the ftl core thread, application main thread by default",
          "required": false
        },
        {
          "param": "fast_shutdown",
          "type": "boolean",
          "description": "When set FTL will minimize persisted data on target application shutdown and rely on shared memory during next load",
          "required": false
        },
        {
          "param": "uuid",
          "type": "string",
          "description": "UUID of restored bdev (not applicable when creating new instance)",
          "required": false
        },
        {
          "param": "overprovisioning",
          "type": "number",
          "description": "Percentage of base device used for relocation, 20% by default",
          "required": false
        },
        {
          "param": "l2p_dram_limit",
          "type": "number",
          "description": "l2p size that could reside in DRAM; default 2048",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_ftl_load",
      "description": "Loads FTL bdev.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Bdev name",
          "required": true
        },
        {
          "param": "base_bdev",
          "type": "string",
          "description": "Name of the base device",
          "required": true
        },
        {
          "param": "cache",
          "type": "string",
          "description": "Name of the cache device",
          "required": true
        },
        {
          "param": "core_mask",
          "type": "string",
          "description": "CPU core(s) possible for placement of the ftl core thread, application main thread by default",
          "required": false
        },
        {
          "param": "fast_shutdown",
          "type": "boolean",
          "description": "When set FTL will minimize persisted data on target application shutdown and rely on shared memory during next load",
          "required": false
        },
        {
          "param": "uuid",
          "type": "string",
          "description": "UUID of restored bdev",
          "required": false
        },
        {
          "param": "overprovisioning",
          "type": "number",
          "description": "Percentage of base device used for relocation, 20% by default",
          "required": false
        },
        {
          "param": "l2p_dram_limit",
          "type": "number",
          "description": "l2p size that could reside in DRAM; default 2048",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_ftl_unload",
      "description": "Unloads FTL bdev.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Bdev name",
          "required": true
        },
        {
          "param": "fast_shutdown",
          "type": "boolean",
          "description": "When set FTL will minimize persisted data during deletion and rely on shared memory during next load",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_ftl_delete",
      "description": "Delete FTL bdev.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Bdev name",
          "required": true
        },
        {
          "param": "fast_shutdown",
          "type": "boolean",
          "description": "When set FTL will minimize persisted data during deletion and rely on shared memory during next load",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_ftl_unmap",
      "description": "Unmap range of LBAs.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Bdev name",
          "required": true
        },
        {
          "param": "lba",
          "type": "number",
          "description": "Starting lba to be unmapped, aligned to 1024",
          "required": true
        },
        {
          "param": "num_blocks",
          "type": "number",
          "description": "Number of blocks, aligned to 1024",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_ftl_get_stats",
      "description": "Get IO statistics for FTL bdev",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Bdev name",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_ftl_get_properties",
      "description": "Get FTL properties",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Bdev name",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_ftl_set_property",
      "description": "Set FTL property",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of the bdev",
          "required": true
        },
        {
          "param": "ftl_property",
          "type": "string",
          "description": "Name of the property to modify",
          "required": true
        },
        {
          "param": "value",
          "type": "string",
          "description": "New value of the property to be set",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_get_bdevs",
      "description": "Get information about block devices (bdevs).",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Bdev name to query (if omitted, query all bdevs)",
          "required": false
        },
        {
          "param": "timeout",
          "type": "number",
          "description": "Time in ms to wait for the bdev with specified name to appear",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_get_iostat",
      "description": "Get I/O statistics of block devices (bdevs).",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Bdev name to query (if omitted, query all bdevs)",
          "required": false
        },
        {
          "param": "per_channel",
          "type": "boolean",
          "description": "Display per channel IO stats for specified bdev",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_reset_iostat",
      "description": "Reset I/O statistics of block devices (bdevs). Note that if one consumer resets I/O statistics, it affects all other consumers.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Bdev name to reset (if omitted, reset all bdevs)",
          "required": false
        },
        {
          "param": "mode",
          "type": "string",
          "description": "Mode to reset I/O statistics: all, maxmin (default: all)",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_enable_histogram",
      "description": "Control whether collecting data for histogram is enabled for specified bdev.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Block device name",
          "required": true
        },
        {
          "param": "enable",
          "type": "boolean",
          "description": "Enable or disable histogram on specified device",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_get_histogram",
      "description": "Get latency histogram for specified bdev.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Block device name",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_error_inject_error",
      "description": "Inject an error via an error bdev. Create an error bdev on base bdev first. Default 'num' value is 1 and if 'num' is set to zero, the specified injection is disabled.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of the error injection bdev",
          "required": true
        },
        {
          "param": "io_type",
          "type": "string",
          "description": "IO type one of 'clear' 'read' 'write' 'unmap' 'flush' 'all'",
          "required": true
        },
        {
          "param": "error_type",
          "type": "string",
          "description": "Error type one of 'failure' 'pending' 'corrupt_data' 'nomem'",
          "required": true
        },
        {
          "param": "num",
          "type": "number",
          "description": "The number of commands you want to fail.(default:1)",
          "required": false
        },
        {
          "param": "queue_depth",
          "type": "number",
          "description": "The queue depth at which to trigger the error",
          "required": false
        },
        {
          "param": "corrupt_offset",
          "type": "number",
          "description": "The offset in bytes to xor with corrupt_value",
          "required": false
        },
        {
          "param": "corrupt_value",
          "type": "number",
          "description": "The value for xor (1-255, 0 is invalid)",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_set_qd_sampling_period",
      "description": "Enable queue depth tracking on a specified bdev.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Block device name",
          "required": true
        },
        {
          "param": "period",
          "type": "number",
          "description": "Period (in microseconds) at which to update the queue depth reading. If set to 0, polling will be disabled.",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_set_qos_limit",
      "description": "Set the quality of service rate limit on a bdev.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Block device name",
          "required": true
        },
        {
          "param": "rw_ios_per_sec",
          "type": "number",
          "description": "Number of R/W I/Os per second to allow (>=1000, example: 20000). 0 means unlimited.",
          "required": false
        },
        {
          "param": "rw_mbytes_per_sec",
          "type": "number",
          "description": "Number of R/W megabytes per second to allow (>=10, example: 100). 0 means unlimited.",
          "required": false
        },
        {
          "param": "r_mbytes_per_sec",
          "type": "number",
          "description": "Number of Read megabytes per second to allow (>=10, example: 100). 0 means unlimited.",
          "required": false
        },
        {
          "param": "w_mbytes_per_sec",
          "type": "number",
          "description": "Number of Write megabytes per second to allow (>=10, example: 100). 0 means unlimited.",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_nvme_apply_firmware",
      "description": "Download and commit firmware to NVMe device.",
      "params": [
        {
          "param": "bdev_name",
          "type": "string",
          "description": "Name of the NVMe block device",
          "required": true
        },
        {
          "param": "filename",
          "type": "string",
          "description": "Filename of the firmware to download",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_nvme_get_transport_statistics",
      "description": "Get bdev_nvme poll group transport statistics.",
      "params": []
    },
    {
      "method": "bdev_nvme_get_controller_health_info",
      "description": "Display health log of the required NVMe bdev device.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of the NVMe bdev controller",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_daos_create",
      "description": "Construct DAOS bdev",
      "params": [
        {
          "param": "num_blocks",
          "type": "number",
          "description": "Size of block device in blocks",
          "required": true
        },
        {
          "param": "block_size",
          "type": "number",
          "description": "Block size in bytes; must be a power of 2 and at least 512",
          "required": true
        },
        {
          "param": "pool",
          "type": "string",
          "description": "DAOS pool label or its uuid",
          "required": true
        },
        {
          "param": "cont",
          "type": "string",
          "description": "DAOS cont label or its uuid",
          "required": true
        },
        {
          "param": "name",
          "type": "string",
          "description": "Name of block device (also the name of the backend file on DAOS DFS)",
          "required": true
        },
        {
          "param": "oclass",
          "type": "string",
          "description": "DAOS object class (default SX)",
          "required": false
        },
        {
          "param": "uuid",
          "type": "string",
          "description": "UUID of new bdev",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_daos_delete",
      "description": "Delete DAOS bdev",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of DAOS bdev to delete",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_daos_resize",
      "description": "Resize DAOS bdev.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of DAOS bdev to resize",
          "required": true
        },
        {
          "param": "new_size",
          "type": "number",
          "description": "New bdev size of resize operation. The unit is MiB",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_nvme_start_mdns_discovery",
      "description": "Starts an mDNS based discovery service for the specified service type for the auto-discovery of discovery controllers (NVMe TP-8009).",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Prefix for NVMe discovery services found; 'n' + unique seqno + namespace ID will be appended to create unique names",
          "required": true
        },
        {
          "param": "svcname",
          "type": "string",
          "description": "Service to discover: e.g. _nvme-disc._tcp",
          "required": true
        },
        {
          "param": "hostnqn",
          "type": "string",
          "description": "NVMe-oF hostnqn to connect from",
          "required": false
        }
      ]
    },
    {
      "method": "bdev_nvme_stop_mdns_discovery",
      "description": "Stops a mDNS discovery service. This includes detaching any controllers that were discovered via the service that is being stopped.",
      "params": [
        {
          "param": "name",
          "type": "string",
          "description": "Name of mDNS discovery instance to stop",
          "required": true
        }
      ]
    },
    {
      "method": "bdev_nvme_get_mdns_discovery_info",
      "description": "Get the information about the mDNS discovery service instances.",
      "params": []
    }
  ]
}
